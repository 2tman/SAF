// Top-level build file where you can add configuration options common to all sub-projects/module
ext {
    configuration = [
//            package          : "cn.salesuite.saf",
//            buildToolsVersion: "23.0.1",
//            compileVersion   : 23,
//            minSdk           : 14,
//            targetSdk        : 23,
//            version_code     : 1,
//            version_name     : "0.0.1",
              saf_version_name:"1.1.19"
    ]

//    libraries = [
//            supportVersion    : "23.1.1",
//            retrofit          : "2.0.0-beta2",
//            rxandroid         : "1.1.0",
//            dagger            : "2.0",
//            javax_annotation  : "10.0-b28",
//            butterknife       : "7.0.1",
//            glide             : "3.6.1",
//            recycler_animators: "2.1.0",
//            circleimageview   : "2.0.0"
//    ]
}

buildscript {
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:1.0.8'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter() {
            url 'http://jcenter.bintray.com/'
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


//genera aar

Properties properties = new Properties()

File localPropertiesFile = project.rootProject.file("local.properties");
if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
}
File projectPropertiesFile = project.rootProject.file("project.properties");
if (projectPropertiesFile.exists()) {
    properties.load(projectPropertiesFile.newDataInputStream())
}

// read properties
def library = properties.getProperty("project.library")
def baseCompiler = properties.getProperty("project.saf-base-compiler")
// injectview
def injectviewAnnotations = properties.getProperty("project.saf-injectview-annotations")
def injectviewCompiler = properties.getProperty("project.saf-injectview-compiler")
def injectview = properties.getProperty("project.injectview")

// router
def routerAnnotations = properties.getProperty("project.saf-router-annotations")
def routerCompiler = properties.getProperty("project.saf-router-compiler")
def router = properties.getProperty("project.router")

// utils
def utils = properties.getProperty("project.utils")

// log
def log = properties.getProperty("project.log")

def classPath = properties.getProperty("project.class.path")
def javaClassPath = properties.getProperty("project.java.class.path")
def cfg = rootProject.ext.configuration // 配置
def VERSION_NAME = cfg.saf_version_name

//需打包的资源所在的路径集
def libraryPath = [project.findProject(library).buildDir.absolutePath + classPath];
def baseCompilerPath = [project.findProject(baseCompiler).buildDir.absolutePath + javaClassPath];

def injectviewCompilerPath = [project.findProject(injectviewCompiler).buildDir.absolutePath + javaClassPath];
def injectviewAnnotationsPath = [project.findProject(injectviewAnnotations).buildDir.absolutePath + javaClassPath];
def injectviewPath = [project.findProject(injectview).buildDir.absolutePath + classPath];

def routerCompilerPath = [project.findProject(routerCompiler).buildDir.absolutePath + javaClassPath];
def routerAnnotationsPath = [project.findProject(routerAnnotations).buildDir.absolutePath + javaClassPath];
def routerPath = [project.findProject(router).buildDir.absolutePath + classPath];

def utilsPath = [project.findProject(utils).buildDir.absolutePath + classPath];

def logPath = [project.findProject(log).buildDir.absolutePath + classPath];

task buildLog( type: Jar) {

    archiveName = 'SAF-log-'+VERSION_NAME+'.jar'

    //初始化资源路径集
    from logPath

    //去除路径集下部分的资源
    exclude "**/BuildConfig.class"
    exclude "**/Manifest.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    include "cn/salesuite/**/*.class"
    destinationDir = file('build/outputs/')
}

task buildUtils( type: Jar) {

    archiveName = 'SAF-utils-'+VERSION_NAME+'.jar'

    //初始化资源路径集
    from utilsPath

    //去除路径集下部分的资源
    exclude "**/BuildConfig.class"
    exclude "**/Manifest.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    include "cn/salesuite/**/*.class"
    destinationDir = file('build/outputs/')
}

task buildInjectCompiler( type: Jar) {

    archiveName = 'SAF-inject-compiler-'+VERSION_NAME+'.jar'

    //初始化资源路径集
    from baseCompilerPath, injectviewCompilerPath

    //去除路径集下部分的资源
    exclude "**/BuildConfig.class"
    exclude "**/Manifest.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    include "cn/salesuite/**/*.class"
    include "META-INF/services/javax.annotation.processing.Processor"
    destinationDir = file('build/outputs/')
}

task buildInjectAnnotations( type: Jar) {

    archiveName = 'SAF-inject-annotations-'+VERSION_NAME+'.jar'

    //初始化资源路径集
    from injectviewAnnotationsPath, injectviewPath

    //去除路径集下部分的资源
    exclude "**/BuildConfig.class"
    exclude "**/Manifest.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    include "cn/salesuite/**/*.class"
    destinationDir = file('build/outputs/')
}

task buildRouterCompiler( type: Jar) {

    archiveName = 'SAF-router-compiler-'+VERSION_NAME+'.jar'

    //初始化资源路径集
    from baseCompilerPath, routerCompilerPath

    //去除路径集下部分的资源
    exclude "**/BuildConfig.class"
    exclude "**/Manifest.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    include "cn/salesuite/**/*.class"
    include "META-INF/services/javax.annotation.processing.Processor"
    destinationDir = file('build/outputs/')
}

task buildRouterAnnotations( type: Jar) {

    archiveName = 'SAF-router-annotations-'+VERSION_NAME+'.jar'

    //初始化资源路径集
    from  routerAnnotationsPath, routerPath

    //去除路径集下部分的资源
    exclude "**/BuildConfig.class"
    exclude "**/Manifest.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    include "cn/salesuite/**/*.class"
    destinationDir = file('build/outputs/')
}

task buildSAF(type: Jar) {

    archiveName = 'SAF-'+VERSION_NAME+'.jar'

    //初始化资源路径集
    from logPath,utilsPath,libraryPath

    //去除路径集下部分的资源
    exclude "**/BuildConfig.class"
    exclude "**/Manifest.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    include "cn/salesuite/**/*.class"
    destinationDir = file('build/outputs/')
}

//生成所有的jar包 编译前，请手动build一下工程，以生成中间文件
task generaAllJar(dependsOn: ['buildLog','buildUtils','buildInjectCompiler','buildInjectAnnotations','buildRouterCompiler','buildRouterAnnotations','buildSAF']) {
    logger.info("all build finish!");
}

defaultTasks 'generaAllJar'