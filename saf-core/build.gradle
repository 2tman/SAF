apply plugin: 'com.android.library'
apply plugin: "findbugs"

def cfg = rootProject.ext.configuration // 配置
def libs = rootProject.ext.libraries // 库

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode 1
        versionName cfg.saf_version_name
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

task clearJar(type: Delete) {
    delete 'build/outputs/*.jar'
}

dependencies {
    testCompile "junit:junit:${libs.junit}"
    compile "com.android.support:design:${libs.support_design}"
    compile 'com.alibaba:fastjson:1.1.56.android'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.0.7'
    compile "com.safframework.log:saf-log:${libs.saf_log}"
    compile "com.safframework:saf-cache:${libs.saf_cache}"
    compile "tony-common:tony-common-utils:${libs.tony_common_utils}"
}

task buildJar(dependsOn: ['assembleRelease'], type: Jar) {

    archiveName = 'SAF-all-1.1.19.jar'

    //需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
    //初始化资源路径集
    from srcClassDir

    //去除路径集下部分的资源
    exclude "com/safframework/saf/BuildConfig.class"
    exclude "com/safframework/saf/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    include "com/safframework/saf/**/*.class"
    destinationDir = file('build/outputs')
}

task javadoc(type: Javadoc) {

    javadoc {
        options.charSet = 'UTF-8'
    }

    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../library/build/outputs/javadoc/")
    failOnError false
}

task findbugs(type: FindBugs,dependsOn:'assembleDebug') {

    ignoreFailures= true
    effort= "default"
    reportLevel= "high"
    println( "$project.buildDir")
    classes = files("$project.buildDir/intermediates/classes")
    source= fileTree("src/main/java/")
    classpath= files()
    reports{
        xml.enabled=false
        html.enabled=true
        xml {
            destination "$project.buildDir/findbugs.xml"
        }
        html{
            destination "$project.buildDir/findbugs.html"
        }
    }
}

defaultTasks 'buildAll','javadoc'
