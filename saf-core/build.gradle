apply plugin: 'com.android.library'
apply plugin: "findbugs"

def cfg = rootProject.ext.configuration // 配置
def VERSION_NAME = cfg.saf_version_name

android {
    compileSdkVersion 25
    buildToolsVersion "25"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 1
        versionName "1.1.19"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

task clearJar(type: Delete) {
    delete 'build/outputs/*.jar'
}

dependencies {
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:design:25.0.0'
    compile 'com.alibaba:fastjson:1.1.56.android'
    compile 'io.reactivex:rxandroid:1.2.0'
    compile 'io.reactivex:rxjava:1.1.5'
    compile 'com.safframework.log:saf-log:1.0.4'
    compile 'com.safframework:saf-cache:1.0.1'
    compile 'tony-common:tony-common-utils:1.0.1'
    compile project(':saf-utils')
}

//task buildJar(dependsOn: ['assembleRelease'], type: Jar) {
//
//    archiveName = 'SAF-all-'+VERSION_NAME+'.jar'
//
//    //需打包的资源所在的路径集
//    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
//    //初始化资源路径集
//    from srcClassDir
//
//    //去除路径集下部分的资源
//    exclude "cn/salesuite/saf/BuildConfig.class"
//    exclude "cn/salesuite/saf/BuildConfig\$*.class"
//    exclude "**/R.class"
//    exclude "**/R\$*.class"
//
//    //只导入资源路径集下的部分资源
//    include "cn/salesuite/saf/**/*.class"
//    destinationDir = file('build/outputs')
//}
//
//task buildCoreJar(dependsOn: ['assembleRelease'], type: Jar) {
//
//    archiveName = 'SAF-core-'+VERSION_NAME+'.jar'
//
//    //需打包的资源所在的路径集
//    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
//    //初始化资源路径集
//    from srcClassDir
//
//    //去除路径集下部分的资源
//    exclude "cn/salesuite/saf/BuildConfig.class"
//    exclude "cn/salesuite/saf/BuildConfig\$*.class"
//    exclude "cn/salesuite/saf/utils/*.class"
//    exclude "cn/salesuite/saf/inject/**/*.class"
//    exclude "cn/salesuite/saf/view/*.class"
//    exclude "cn/salesuite/saf/eventbus/*.class"
//    exclude "cn/salesuite/saf/download/*.class"
//    exclude "**/R.class"
//    exclude "**/R\$*.class"
//
//    //只导入资源路径集下的部分资源
//    include "cn/salesuite/saf/**/*.class"
//    destinationDir = file('build/outputs')
//}
//
//task buildAnnotationJar(dependsOn: ['assembleRelease'], type: Jar) {
//
//    archiveName = 'SAF-annotation-'+VERSION_NAME+'.jar'
//
//    //需打包的资源所在的路径集
//    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
//    //初始化资源路径集
//    from srcClassDir
//
//    //只导入资源路径集下的部分资源
//    include "cn/salesuite/saf/inject/**/*.class"
//    destinationDir = file('build/outputs')
//}
//
//task buildOrmJar(dependsOn: ['assembleRelease'], type: Jar) {
//
//    archiveName = 'SAF-orm-'+VERSION_NAME+'.jar'
//
//    //需打包的资源所在的路径集
//    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
//    //初始化资源路径集
//    from srcClassDir
//
//    //只导入资源路径集下的部分资源
//    include "cn/salesuite/saf/orm/**/*.class"
//    destinationDir = file('build/outputs')
//}
//
//task buildHttpJar(dependsOn: ['assembleRelease'], type: Jar) {
//
//    archiveName = 'SAF-http-'+VERSION_NAME+'.jar'
//
//    //需打包的资源所在的路径集
//    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
//    //初始化资源路径集
//    from srcClassDir
//
//    //只导入资源路径集下的部分资源
//    include "cn/salesuite/saf/http/rest/**/*.class"
//    destinationDir = file('build/outputs')
//}
//
//task buildRouterJar(dependsOn: ['assembleRelease'], type: Jar) {
//
//    archiveName = 'SAF-router-'+VERSION_NAME+'.jar'
//
//    //需打包的资源所在的路径集
//    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
//    //初始化资源路径集
//    from srcClassDir
//
//    //只导入资源路径集下的部分资源
//    include "cn/salesuite/saf/route/**/*.class"
//    destinationDir = file('build/outputs')
//}
//
//// 打包各个jar
//task buildAll(dependsOn: ['buildJar','buildCoreJar','buildAnnotationJar','buildOrmJar','buildHttpJar','buildRouterJar']) {
//
//}

task javadoc(type: Javadoc) {

    javadoc {
        options.charSet = 'UTF-8'
    }

    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../library/build/outputs/javadoc/")
    failOnError false
}

task findbugs(type: FindBugs,dependsOn:'assembleDebug') {

    ignoreFailures= true
    effort= "default"
    reportLevel= "high"
    println( "$project.buildDir")
    classes = files("$project.buildDir/intermediates/classes")
    source= fileTree("src/main/java/")
    classpath= files()
    reports{
        xml.enabled=false
        html.enabled=true
        xml {
            destination "$project.buildDir/findbugs.xml"
        }
        html{
            destination "$project.buildDir/findbugs.html"
        }
    }
}

defaultTasks 'buildAll','javadoc'
