apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"
    //兼容API 23干掉了httpClient，手动加入httpClient库,或者将org.apache.http.legacy.jar放到lib文件中
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

task clearJar(type: Delete) {
    delete 'build/outputs/*.jar'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:design:23.1.1'
    compile 'com.alibaba:fastjson:1.1.46.android'
    compile 'commons-codec:commons-codec:1.10'
    compile 'joda-time:joda-time:2.9'
    compile 'io.reactivex:rxandroid:1.0.1'
}

task buildJar(dependsOn: ['compileReleaseSources'], type: Jar) {

    archiveName = 'SAF-all-'+VERSION_NAME+'.jar'

    //需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
    //初始化资源路径集
    from srcClassDir

    //去除路径集下部分的资源
    exclude "cn/salesuite/saf/BuildConfig.class"
    exclude "cn/salesuite/saf/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    include "cn/salesuite/saf/**/*.class"
    destinationDir = file('build/outputs')
}

task buildCoreJar(dependsOn: ['compileReleaseSources'], type: Jar) {

    archiveName = 'SAF-core-'+VERSION_NAME+'.jar'

    //需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
    //初始化资源路径集
    from srcClassDir

    //去除路径集下部分的资源
    exclude "cn/salesuite/saf/BuildConfig.class"
    exclude "cn/salesuite/saf/BuildConfig\$*.class"
    exclude "cn/salesuite/saf/utils/*.class"
    exclude "cn/salesuite/saf/inject/**/*.class"
    exclude "cn/salesuite/saf/view/*.class"
    exclude "cn/salesuite/saf/eventbus/*.class"
    exclude "cn/salesuite/saf/download/*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    include "cn/salesuite/saf/**/*.class"
    destinationDir = file('build/outputs')
}

task buildAnnotationJar(dependsOn: ['compileReleaseSources'], type: Jar) {

    archiveName = 'SAF-annotation-'+VERSION_NAME+'.jar'

    //需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
    //初始化资源路径集
    from srcClassDir

    //只导入资源路径集下的部分资源
    include "cn/salesuite/saf/inject/**/*.class"
    destinationDir = file('build/outputs')
}

task buildOrmJar(dependsOn: ['compileReleaseSources'], type: Jar) {

    archiveName = 'SAF-orm-'+VERSION_NAME+'.jar'

    //需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
    //初始化资源路径集
    from srcClassDir

    //只导入资源路径集下的部分资源
    include "cn/salesuite/saf/orm/**/*.class"
    destinationDir = file('build/outputs')
}

task buildHttpJar(dependsOn: ['compileReleaseSources'], type: Jar) {

    archiveName = 'SAF-http-'+VERSION_NAME+'.jar'

    //需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
    //初始化资源路径集
    from srcClassDir

    //只导入资源路径集下的部分资源
    include "cn/salesuite/saf/http/rest/**/*.class"
    destinationDir = file('build/outputs')
}

task buildRouterJar(dependsOn: ['compileReleaseSources'], type: Jar) {

    archiveName = 'SAF-router-'+VERSION_NAME+'.jar'

    //需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
    //初始化资源路径集
    from srcClassDir

    //只导入资源路径集下的部分资源
    include "cn/salesuite/saf/route/**/*.class"
    destinationDir = file('build/outputs')
}

// 打包各个jar
task buildAll(dependsOn: ['buildJar','buildCoreJar','buildAnnotationJar','buildOrmJar','buildHttpJar','buildRouterJar']) {

}

task javadoc(type: Javadoc) {

    javadoc {
        options.charSet = 'UTF-8'
    }

    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../library/build/outputs/javadoc/")
    failOnError false
}

defaultTasks 'buildAll','javadoc'
